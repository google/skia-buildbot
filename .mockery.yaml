with-expecter: false
quiet: False
mockname: "{{.InterfaceName}}"
filename: "{{.MockName}}.go"
outpkg: "mocks"
dir: "{{.InterfaceDir}}/mocks"
packages:
  go.skia.org/infra/am/go/alertclient:
    interfaces:
      APIClient:
  go.skia.org/infra/autoroll/go/config/db:
    interfaces:
      DB:
  go.skia.org/infra/autoroll/go/manual:
    interfaces:
      DB:
  go.skia.org/infra/autoroll/go/modes:
    interfaces:
      ModeHistory:
  go.skia.org/infra/autoroll/go/recent_rolls:
    interfaces:
      DB:
  go.skia.org/infra/autoroll/go/roller_cleanup:
    interfaces:
      DB:
  go.skia.org/infra/autoroll/go/status:
    interfaces:
      DB:
  go.skia.org/infra/autoroll/go/strategy:
    interfaces:
      StrategyHistory:
  go.skia.org/infra/autoroll/go/unthrottle:
    interfaces:
      Throttle:
  go.skia.org/infra/bugs-central/go/types:
    interfaces:
      BugsDB:
  go.skia.org/infra/docsyserver/go/codereview:
    interfaces:
      CodeReview:
  go.skia.org/infra/docsyserver/go/docsy:
    interfaces:
      Docsy:
  go.skia.org/infra/fiddlek/go/store:
    interfaces:
      Store:
  go.skia.org/infra/go/allowed:
    interfaces:
      Allow:
  go.skia.org/infra/go/alogin:
    interfaces:
      Login:
  go.skia.org/infra/go/buildbucket:
    interfaces:
      BuildBucketInterface:
  go.skia.org/infra/go/cas:
    interfaces:
      CAS:
  go.skia.org/infra/go/cas/rbe:
    interfaces:
      RBEClient:
  go.skia.org/infra/go/chrome_branch:
    interfaces:
      Client:
  go.skia.org/infra/go/cipd:
    interfaces:
      CIPDClient:
  go.skia.org/infra/go/coverage/coveragestore:
    interfaces:
      Store:
  go.skia.org/infra/go/docker:
    interfaces:
      Client:
  go.skia.org/infra/go/gcs:
    interfaces:
      GCSClient:
  go.skia.org/infra/go/gerrit:
    interfaces:
      GerritInterface:
  go.skia.org/infra/go/gitiles:
    interfaces:
      GitilesRepo:
  go.skia.org/infra/go/gitstore:
    interfaces:
      GitStore:
  go.skia.org/infra/go/login:
    interfaces:
      OAuthConfig:
  go.skia.org/infra/go/louhi:
    interfaces:
      DB:
  go.skia.org/infra/go/monorail/v3:
    interfaces:
      IMonorailService:
  go.skia.org/infra/go/now:
    interfaces:
      TimeTicker:
  go.skia.org/infra/pinpoint/go/backends:
    interfaces:
      BigQueryClient:
      BuildbucketClient:
      CrrevClient:
      IssueTracker:
      SwarmingClient:
  go.skia.org/infra/go/luciconfig:
    interfaces:
      ApiClient:
  go.skia.org/infra/go/pubsub:
    config:
      replace-type:
        - cloud.google.com/go/internal/pubsub=cloud.google.com/go/pubsub
    interfaces:
      Client:
      Snapshot:
      Subscription:
      Topic:
      PublishResult:
  go.skia.org/infra/go/secret:
    interfaces:
      Client:
  go.skia.org/infra/go/serial:
    interfaces:
      Port:
  go.skia.org/infra/go/sql/pool:
    interfaces:
      Pool:
  go.skia.org/infra/go/sser:
    interfaces:
      PeerFinder:
      Server:
  go.skia.org/infra/go/swarming:
    interfaces:
      ApiClient:
  go.skia.org/infra/go/swarming/v2:
    interfaces:
      SwarmingV2Client:
  go.skia.org/infra/go/vcsinfo:
    interfaces:
      VCS:
  go.skia.org/infra/go/vfs:
    interfaces:
      FS:
      File:
  go.skia.org/infra/gold-client/go/gcsuploader:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      GCSUploader:
  go.skia.org/infra/gold-client/go/httpclient:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      HTTPClient:
  go.skia.org/infra/gold-client/go/imagedownloader:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      ImageDownloader:
  go.skia.org/infra/gold-client/go/imgmatching:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      Matcher:
  go.skia.org/infra/golden/cmd/gitilesfollower:
    interfaces:
      GitilesLogger:
  go.skia.org/infra/golden/go/code_review:
    interfaces:
      ChangelistLandedUpdater:
        config:
      Client:
  go.skia.org/infra/golden/go/continuous_integration:
    interfaces:
      Client:
  go.skia.org/infra/golden/go/diff:
    interfaces:
      Calculator:
  go.skia.org/infra/golden/go/diff/worker:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      ImageSource:
  go.skia.org/infra/golden/go/ignore:
    interfaces:
      Store:
  go.skia.org/infra/golden/go/ingestion:
    interfaces:
      FileSearcher:
        config:
      Processor:
        config:
      Source:
        config:
      Store:
  go.skia.org/infra/golden/go/ingestion_processors:
    interfaces:
      LookupSystem:
  go.skia.org/infra/golden/go/search:
    interfaces:
      API:
  go.skia.org/infra/golden/go/storage:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      GCSClient:
  go.skia.org/infra/jsfiddle/go/store:
    interfaces:
      Store:
  go.skia.org/infra/kube/go/authproxy/auth:
    interfaces:
      Auth:
  go.skia.org/infra/machine/go/machine/change/sink:
    interfaces:
      Sink:
  go.skia.org/infra/machine/go/machine/change/source:
    interfaces:
      Source:
  go.skia.org/infra/machine/go/machine/event/sink:
    interfaces:
      Sink:
  go.skia.org/infra/machine/go/machine/store:
    interfaces:
      Store:
  go.skia.org/infra/npm-audit-mirror/go/types:
    interfaces:
      Check:
        config:
      ChecksManager:
        config:
      IIssueTrackerService:
        config:
      NpmDB:
        config:
      ProjectAudit:
        config:
      ProjectMirror:
  go.skia.org/infra/perf/go/alerts:
    config:
      dir: "{{.InterfaceDir}}/mock"
    interfaces:
      ConfigProvider:
        config:
      Store:
  go.skia.org/infra/perf/go/anomalies:
    config:
      dir: "{{.InterfaceDir}}/mock"
    interfaces:
      Store:
  go.skia.org/infra/perf/go/anomalygroup:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      Store:
  # Uncomment if changes are made to anomalygroupservice. This would require some changes to the
  # generate mocks. See comments in the mock file before generating this.
  # go.skia.org/infra/perf/go/anomalygroup/proto/v1:
  #   config:
  #     dir: "{{.InterfaceDir}}/mocks"
  #   interfaces:
  #     AnomalyGroupServiceServer:
  go.skia.org/infra/perf/go/anomalygroup/utils:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      AnomalyGrouper:
  go.skia.org/infra/go/cache:
    config:
      dir: "{{.InterfaceDir}}/mock"
    interfaces:
      Cache:
  go.skia.org/infra/perf/go/chromeperf:
    config:
      dir: "{{.InterfaceDir}}/mock"
    interfaces:
      ChromePerfClient:
      AnomalyApiClient:
  go.skia.org/infra/perf/go/culprit:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      Store:
  # Uncomment if changes are made to culpritservice. This would require some changes to the generate
  # mocks. See comments in the mock file before generating this.
  # go.skia.org/infra/perf/go/culprit/proto/v1:
  #   config:
  #     dir: "{{.InterfaceDir}}/mocks"
  #   interfaces:
  #     CulpritServiceServer:
  go.skia.org/infra/perf/go/culprit/formatter:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      Formatter:
  go.skia.org/infra/perf/go/culprit/notify:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      CulpritNotifier:
  go.skia.org/infra/perf/go/culprit/transport:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      Transport:
  go.skia.org/infra/perf/go/dataframe:
    interfaces:
      DataFrameBuilder:
  go.skia.org/infra/perf/go/git:
    interfaces:
      Git:
  go.skia.org/infra/perf/go/graphsshortcut:
    interfaces:
      Store:
  go.skia.org/infra/perf/go/notify:
    interfaces:
      NotificationDataProvider:
      Notifier:
        config:
      Transport:
  go.skia.org/infra/perf/go/perf-tool/application:
    interfaces:
      Application:
  go.skia.org/infra/perf/go/psrefresh:
    interfaces:
      OPSProvider:
  go.skia.org/infra/perf/go/redis:
    interfaces:
      RedisWrapper:
  go.skia.org/infra/perf/go/regression:
    interfaces:
      Store:
  go.skia.org/infra/perf/go/shortcut:
    interfaces:
      Store:
  go.skia.org/infra/perf/go/subscription:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      Store:
  go.skia.org/infra/perf/go/favorites:
    config:
      dir: "{{.InterfaceDir}}/mocks"
    interfaces:
      Store:
  go.skia.org/infra/perf/go/tracestore:
    interfaces:
      TraceStore:
  go.skia.org/infra/perf/go/trybot/store:
    interfaces:
      TryBotStore:
  go.skia.org/infra/temporal/go/client:
    interfaces:
      TemporalProvider:
  go.skia.org/infra/scrap/go/scrap:
    interfaces:
      ScrapExchange:
  go.skia.org/infra/sk/go/relnotes:
    interfaces:
      Aggregator:
  go.skia.org/infra/skcq/go/caches:
    interfaces:
      CurrentChangesCache:
  go.skia.org/infra/skcq/go/codereview:
    interfaces:
      CodeReview:
  go.skia.org/infra/skcq/go/config:
    interfaces:
      ConfigReader:
  go.skia.org/infra/skcq/go/db:
     interfaces:
       DB:
  go.skia.org/infra/skcq/go/types:
    interfaces:
      ThrottlerManager:
        config:
      Verifier:
        config:
      VerifiersManager:
  go.skia.org/infra/skolo/go/powercycle:
    interfaces:
      Controller:
  go.skia.org/infra/status/go/capacity:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      CapacityClient:
  go.skia.org/infra/status/go/incremental:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      IncrementalCache:
  go.skia.org/infra/task_scheduler/go/cacher:
    interfaces:
      Cacher:
  go.skia.org/infra/task_scheduler/go/db:
    config:
      dir: "{{.InterfaceDir}}/../mocks"
    interfaces:
      RemoteDB:
      JobDB:
  go.skia.org/infra/task_scheduler/go/db/cache:
    interfaces:
      JobCache:
        config:
      TaskCache:
  go.skia.org/infra/task_scheduler/go/task_cfg_cache:
    interfaces:
      TaskCfgCache:
  go.skia.org/infra/task_scheduler/go/window:
    interfaces:
      Window:
  k8s.io/apimachinery/pkg/watch:
    config:
      dir: "go/k8s/watch/mocks"
    interfaces:
      Interface:
  k8s.io/client-go/kubernetes:
    config:
      dir: "go/sser/mocks"
    interfaces:
      Interface:
  k8s.io/client-go/kubernetes/typed/core/v1:
    config:
      dir: "go/k8s/mocks"
    interfaces:
      CoreV1Interface:
      PodInterface:
