// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: cabe/proto/v1/service.proto

package proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAnalysisRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PinpointJobId string                 `protobuf:"bytes,1,opt,name=pinpoint_job_id,json=pinpointJobId,proto3" json:"pinpoint_job_id,omitempty"`
	// experiment_spec defines the experiment arms as well as which specific
	// benchmarks and workloads it should expect to find in task result output
	// files.  If reality doesn't match the spec, CABE returns an error with
	// some information about what didn't match the provided ExperimentSpec.
	//
	// If experiment_spec isn't set, CABE will infer one based on heuristics*
	// and data available from Swarming and RBE-CAS at the time of the request.
	// Note that this is best-effort and not guaranteed to do what the caller
	// expects. If you have specific benchmarks and workloads that need to be
	// either analyzed or cause errors if they are missing, you should specify an
	// explicit experiment_spec value.
	//
	// *See infer_specs.go and infer_specs_test.go for implementation details.
	ExperimentSpec *ExperimentSpec `protobuf:"bytes,2,opt,name=experiment_spec,json=experimentSpec,proto3" json:"experiment_spec,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetAnalysisRequest) Reset() {
	*x = GetAnalysisRequest{}
	mi := &file_cabe_proto_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalysisRequest) ProtoMessage() {}

func (x *GetAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cabe_proto_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalysisRequest.ProtoReflect.Descriptor instead.
func (*GetAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_cabe_proto_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAnalysisRequest) GetPinpointJobId() string {
	if x != nil {
		return x.PinpointJobId
	}
	return ""
}

func (x *GetAnalysisRequest) GetExperimentSpec() *ExperimentSpec {
	if x != nil {
		return x.ExperimentSpec
	}
	return nil
}

type GetAnalysisResponse struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Results []*AnalysisResult      `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// If an experiment_spec was not included in the GetAnalysisRequest,
	// cabe will apply some best-effort heuristics to infer an experiment
	// specification based on swarming task metadata and contents of task
	// output json files. The GetAnalysis method will attach whatever
	// it was able to infer the experiment to this field.
	InferredExperimentSpec *ExperimentSpec `protobuf:"bytes,2,opt,name=inferred_experiment_spec,json=inferredExperimentSpec,proto3" json:"inferred_experiment_spec,omitempty"`
	// Extra information about the analysis and/or the process of generating
	// the results.
	Metadata      *AnalysisMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAnalysisResponse) Reset() {
	*x = GetAnalysisResponse{}
	mi := &file_cabe_proto_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalysisResponse) ProtoMessage() {}

func (x *GetAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cabe_proto_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalysisResponse.ProtoReflect.Descriptor instead.
func (*GetAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_cabe_proto_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetAnalysisResponse) GetResults() []*AnalysisResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *GetAnalysisResponse) GetInferredExperimentSpec() *ExperimentSpec {
	if x != nil {
		return x.InferredExperimentSpec
	}
	return nil
}

func (x *GetAnalysisResponse) GetMetadata() *AnalysisMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_cabe_proto_v1_service_proto protoreflect.FileDescriptor

const file_cabe_proto_v1_service_proto_rawDesc = "" +
	"\n" +
	"\x1bcabe/proto/v1/service.proto\x12\acabe.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1ccabe/proto/v1/analysis.proto\x1a\x18cabe/proto/v1/spec.proto\"~\n" +
	"\x12GetAnalysisRequest\x12&\n" +
	"\x0fpinpoint_job_id\x18\x01 \x01(\tR\rpinpointJobId\x12@\n" +
	"\x0fexperiment_spec\x18\x02 \x01(\v2\x17.cabe.v1.ExperimentSpecR\x0eexperimentSpec\"\xd2\x01\n" +
	"\x13GetAnalysisResponse\x121\n" +
	"\aresults\x18\x01 \x03(\v2\x17.cabe.v1.AnalysisResultR\aresults\x12Q\n" +
	"\x18inferred_experiment_spec\x18\x02 \x01(\v2\x17.cabe.v1.ExperimentSpecR\x16inferredExperimentSpec\x125\n" +
	"\bmetadata\x18\x03 \x01(\v2\x19.cabe.v1.AnalysisMetadataR\bmetadata2{\n" +
	"\bAnalysis\x12o\n" +
	"\vGetAnalysis\x12\x1b.cabe.v1.GetAnalysisRequest\x1a\x1c.cabe.v1.GetAnalysisResponse\"%\x82\xd3\xe4\x93\x02\x1f\"\x1d/cabe.v1.Analysis/GetAnalysisB!Z\x1fgo.skia.org/infra/cabe/go/protob\x06proto3"

var (
	file_cabe_proto_v1_service_proto_rawDescOnce sync.Once
	file_cabe_proto_v1_service_proto_rawDescData []byte
)

func file_cabe_proto_v1_service_proto_rawDescGZIP() []byte {
	file_cabe_proto_v1_service_proto_rawDescOnce.Do(func() {
		file_cabe_proto_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cabe_proto_v1_service_proto_rawDesc), len(file_cabe_proto_v1_service_proto_rawDesc)))
	})
	return file_cabe_proto_v1_service_proto_rawDescData
}

var file_cabe_proto_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_cabe_proto_v1_service_proto_goTypes = []any{
	(*GetAnalysisRequest)(nil),  // 0: cabe.v1.GetAnalysisRequest
	(*GetAnalysisResponse)(nil), // 1: cabe.v1.GetAnalysisResponse
	(*ExperimentSpec)(nil),      // 2: cabe.v1.ExperimentSpec
	(*AnalysisResult)(nil),      // 3: cabe.v1.AnalysisResult
	(*AnalysisMetadata)(nil),    // 4: cabe.v1.AnalysisMetadata
}
var file_cabe_proto_v1_service_proto_depIdxs = []int32{
	2, // 0: cabe.v1.GetAnalysisRequest.experiment_spec:type_name -> cabe.v1.ExperimentSpec
	3, // 1: cabe.v1.GetAnalysisResponse.results:type_name -> cabe.v1.AnalysisResult
	2, // 2: cabe.v1.GetAnalysisResponse.inferred_experiment_spec:type_name -> cabe.v1.ExperimentSpec
	4, // 3: cabe.v1.GetAnalysisResponse.metadata:type_name -> cabe.v1.AnalysisMetadata
	0, // 4: cabe.v1.Analysis.GetAnalysis:input_type -> cabe.v1.GetAnalysisRequest
	1, // 5: cabe.v1.Analysis.GetAnalysis:output_type -> cabe.v1.GetAnalysisResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cabe_proto_v1_service_proto_init() }
func file_cabe_proto_v1_service_proto_init() {
	if File_cabe_proto_v1_service_proto != nil {
		return
	}
	file_cabe_proto_v1_analysis_proto_init()
	file_cabe_proto_v1_spec_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cabe_proto_v1_service_proto_rawDesc), len(file_cabe_proto_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cabe_proto_v1_service_proto_goTypes,
		DependencyIndexes: file_cabe_proto_v1_service_proto_depIdxs,
		MessageInfos:      file_cabe_proto_v1_service_proto_msgTypes,
	}.Build()
	File_cabe_proto_v1_service_proto = out.File
	file_cabe_proto_v1_service_proto_goTypes = nil
	file_cabe_proto_v1_service_proto_depIdxs = nil
}
