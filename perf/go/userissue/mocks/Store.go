// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	userissue "go.skia.org/infra/perf/go/userissue"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, traceKey, commitPosition
func (_m *Store) Delete(ctx context.Context, traceKey string, commitPosition int64) error {
	ret := _m.Called(ctx, traceKey, commitPosition)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, traceKey, commitPosition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserIssuesForTraceKeys provides a mock function with given fields: ctx, traceKeys, startCommitPosition, endCommitPosition
func (_m *Store) GetUserIssuesForTraceKeys(ctx context.Context, traceKeys []string, startCommitPosition int64, endCommitPosition int64) ([]userissue.UserIssue, error) {
	ret := _m.Called(ctx, traceKeys, startCommitPosition, endCommitPosition)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIssuesForTraceKeys")
	}

	var r0 []userissue.UserIssue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int64, int64) ([]userissue.UserIssue, error)); ok {
		return rf(ctx, traceKeys, startCommitPosition, endCommitPosition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int64, int64) []userissue.UserIssue); ok {
		r0 = rf(ctx, traceKeys, startCommitPosition, endCommitPosition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userissue.UserIssue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int64, int64) error); ok {
		r1 = rf(ctx, traceKeys, startCommitPosition, endCommitPosition)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, req
func (_m *Store) Save(ctx context.Context, req *userissue.UserIssue) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *userissue.UserIssue) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
