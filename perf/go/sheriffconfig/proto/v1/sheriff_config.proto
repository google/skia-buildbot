syntax = "proto3";

package sheriff_config.v1;

option go_package = "go.skia.org/infra/perf/go/sheriffconfig/proto/v1";

// Rules specify how to capture traces for Anomaly Detection.
//
// A match or exclude string must be of the string format:
// "{key1}={value1}&{key2=value2}&..."
// where key is the name of the parameter and value is the value to filter for.
// If a key doesn't match an actual key in the Skia DB, the alert config will simply get
// ignored.
//
// For matching, if a parameter is not specified, the default value is wildcard "*",
// meaning match to any value.
// For excluding, each statement must only include a single key.
//
// Consider the example below:
// {
//   match: [
//     "master=ChromiumPerf"&bot=~lacros-.*-perf&benchmark=Speedometer2",
//     "master=ChromiumPerf&benchmark=Jetstream2",
//   ],
//   exclude: [
//     "bot=lacros-eve-perf",
//     "bot=lacros-x86-perf",
//   ]
// }
//
// In SQL grammar, this would translate to:
// ...
// SELECT * FROM Metrics
// WHERE
// (main='ChromiumPerf' AND bot REGEXP 'lacros-.*-perf' AND benchmark='Speedometer2'
// AND bot!='lacros-eve-perf' AND bot!='lacros-x86-perf')
// OR
// (main='ChromiumPerf' AND benchmark='Jetstream'
// AND bot!='lacros-eve-perf' AND bot!='lacros-x86-perf')
message Rules {
  repeated string match = 1;
  repeated string exclude = 2;
}

// An AnomalyConfig defines the bounds for which a change in a matching metric
// can be considered "anomalous". For metrics that are matched, we apply the
// anomaly config to determine whether we should create an alert.
//
// The configuration settings defined for an anomaly configuration override
// defaults that are defined by the anomaly detection algorithm.
//
// TODO(eduardoyap): Figure out default values and document them here.
message AnomalyConfig {

  enum Step {
    // Step detection algorithm.
    ORIGINAL_STEP = 0;

    // Step detection using absolute magnitude as threshold.
    ABSOLUTE_STEP = 1;

    // Step detection using a constant as threshold.
    CONST_STEP = 2;

    // Step detection that checks if step size is greater than some
    // percentage of the mean of the first half of the trace.
    PERCENT_STEP = 3;

    // CohenStep uses Cohen's d method to detect a change.
    // https://en.wikipedia.org/wiki/Effect_size#Cohen's_d
    COHEN_STEP = 4;

    // MannWhitneyU uses the Mann-Whitney U test to detect a change.
    // https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test
    MANN_WHITNEY_U = 5;
  }

  // Anomaly detection algorithm.
  // Default: Original step.
  Step step = 1;

  // How many commits to each side of a commit to consider when looking for a step.
  // TODO(eduardoyap): Determine default and document here.
  optional int32 radius = 2;

  // The threshold value beyond which values become interesting
  // (indicates a real regression). Range of this value depends on algorithm used.
  float threshold = 3;

  // How many traces need to be found interesting before an alert is fired.
  // Default: 1.
  optional int32 minimum_num = 4;

  // If true, only include commits that have data.
  // Default: False
  optional bool sparse = 5;

  // If algo is set to K-means, this determines the K in K-means clustering.
  // Default: 0.
  optional int32 k = 6;

  // Comma separated list of keys that all clustering should be broken up accross.
  // Keys must not be part of a pattern.
  // Default: "".
  optional string group_by = 7;

  // Which direction will trigger an alert.
  enum Direction {
    BOTH = 0;
    UP = 1;
    DOWN = 2;
  }
  // Default: Both
  Direction direction = 8;

  // What actions should be taken for detected anomalies.
  // - NOACTION: Only show anomaly in UI. Don't triage or bisect.
  // - TRIAGE: File Buganizer issue for anomalies found. Don't bisect.
  // - BISECT: Triage and bisect anomaly groups.
  enum Action {
    NOACTION = 0;
    TRIAGE = 1;
    BISECT = 2;
  }
  // Default: No Action.
  Action action = 9;

  // What Clustering Algorithm to use.
  // StepFit: Look at each trace individually.
  // KMeans: Cluster traces using K-Means Clustering.
  enum Algo {
    STEPFIT = 0;
    KMEANS = 1;
  }
  // Default: Step Fit Grouping
  Algo algo = 10;

  // Which metrics should be captured by this AnomalyConfig.
  Rules rules = 11;
}

// A Subscription describes a configuration through which we determine:
// - A set of metrics a group of users are interested in alert monitoring.
//   These anomalies are grouped together into anomaly groups if they
//   overlap.
// - Anomaly detection settings.
// - Alerting settings.
message Subscription {

  // A name is a free-form name for human readability purposes. Also
  // serves as a unique key for the subscription and should be unique from
  // all other subscription names.
  string name = 1;

  // The contact email address who owns this subscription. This is a required
  // field. There must be an owner we can contact for each subscription.
  string contact_email = 2;

  // A list of labels applied to the Buganizer issues associated with
  // this subscription.
  repeated string bug_labels = 3;

  // A list of Hotlist labels applied to the Buganizer issues associated with
  // this subscription.
  repeated string hotlist_labels = 4;

  // A Buganizer component in which to file issues for this subscription.
  string bug_component = 6;

  enum Priority {
    // If unspecified, default is P2.
    P_UNSPECIFIED = 0;
    P0 = 1;
    P1 = 2;
    P2 = 3;
    P3 = 4;
    P4 = 5;
  }

  // Priority to set in Buganizer issue. Default is P2.
  Priority bug_priority = 9;

  enum Severity {
    // If unspecified, default is S2.
    S_UNSPECIFIED = 0;
    S0 = 1;
    S1 = 2;
    S2 = 3;
    S3 = 4;
    S4 = 5;
  }

  // Severity to set in Buganizer issue. Default is S2.
  Severity bug_severity = 10;

  // A list of e-mails to add to Buganizer issue CC list.
  repeated string bug_cc_emails = 7;

  // Here we specify the subset of metrics we are interested in and what anomaly
  // detection algorithms to apply. This field can be repeated so that
  // different algorithms can be applied depending on the metrics captured.
  //
  // Anomaly configs in the same subscription should not have
  // overlapping metrics.
  repeated AnomalyConfig anomaly_configs = 8;
}

// A SheriffConfig lists the subscriptions for a Skia Perf instance.
// Subscriptions may only capture metrics which are uploaded to the Skia Perf
// instance specified.
message SheriffConfig {
  repeated Subscription subscriptions = 1;
}
