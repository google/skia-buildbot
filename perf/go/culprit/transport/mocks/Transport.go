// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "go.skia.org/infra/perf/go/subscription/proto/v1"
)

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

// SendNewNotification provides a mock function with given fields: ctx, subscription, subject, body
func (_m *Transport) SendNewNotification(ctx context.Context, subscription *v1.Subscription, subject string, body string) (string, error) {
	ret := _m.Called(ctx, subscription, subject, body)

	if len(ret) == 0 {
		panic("no return value specified for SendNewNotification")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Subscription, string, string) (string, error)); ok {
		return rf(ctx, subscription, subject, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Subscription, string, string) string); ok {
		r0 = rf(ctx, subscription, subject, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Subscription, string, string) error); ok {
		r1 = rf(ctx, subscription, subject, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransport creates a new instance of Transport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transport {
	mock := &Transport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
