// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MetadataStore is an autogenerated mock type for the MetadataStore type
type MetadataStore struct {
	mock.Mock
}

// GetMetadata provides a mock function with given fields: ctx, sourceFileName
func (_m *MetadataStore) GetMetadata(ctx context.Context, sourceFileName string) (map[string]string, error) {
	ret := _m.Called(ctx, sourceFileName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]string, error)); ok {
		return rf(ctx, sourceFileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, sourceFileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sourceFileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataForSourceFileIDs provides a mock function with given fields: ctx, sourceFileIDs
func (_m *MetadataStore) GetMetadataForSourceFileIDs(ctx context.Context, sourceFileIDs []int64) (map[int64]map[string]string, error) {
	ret := _m.Called(ctx, sourceFileIDs)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataForSourceFileIDs")
	}

	var r0 map[int64]map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) (map[int64]map[string]string, error)); ok {
		return rf(ctx, sourceFileIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) map[int64]map[string]string); ok {
		r0 = rf(ctx, sourceFileIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, sourceFileIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataMultiple provides a mock function with given fields: ctx, sourceFileNames
func (_m *MetadataStore) GetMetadataMultiple(ctx context.Context, sourceFileNames []string) (map[string]map[string]string, error) {
	ret := _m.Called(ctx, sourceFileNames)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataMultiple")
	}

	var r0 map[string]map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (map[string]map[string]string, error)); ok {
		return rf(ctx, sourceFileNames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]map[string]string); ok {
		r0 = rf(ctx, sourceFileNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, sourceFileNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMetadata provides a mock function with given fields: ctx, sourceFileName, links
func (_m *MetadataStore) InsertMetadata(ctx context.Context, sourceFileName string, links map[string]string) error {
	ret := _m.Called(ctx, sourceFileName, links)

	if len(ret) == 0 {
		panic("no return value specified for InsertMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) error); ok {
		r0 = rf(ctx, sourceFileName, links)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMetadataStore creates a new instance of MetadataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataStore {
	mock := &MetadataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
