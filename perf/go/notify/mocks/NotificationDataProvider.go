// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	common "go.skia.org/infra/perf/go/notify/common"

	mock "github.com/stretchr/testify/mock"
)

// NotificationDataProvider is an autogenerated mock type for the NotificationDataProvider type
type NotificationDataProvider struct {
	mock.Mock
}

// GetNotificationDataRegressionFound provides a mock function with given fields: _a0, _a1
func (_m *NotificationDataProvider) GetNotificationDataRegressionFound(_a0 context.Context, _a1 common.RegressionMetadata) (*common.NotificationData, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationDataRegressionFound")
	}

	var r0 *common.NotificationData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.RegressionMetadata) (*common.NotificationData, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.RegressionMetadata) *common.NotificationData); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.RegressionMetadata) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationDataRegressionMissing provides a mock function with given fields: _a0, _a1
func (_m *NotificationDataProvider) GetNotificationDataRegressionMissing(_a0 context.Context, _a1 common.RegressionMetadata) (*common.NotificationData, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationDataRegressionMissing")
	}

	var r0 *common.NotificationData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.RegressionMetadata) (*common.NotificationData, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.RegressionMetadata) *common.NotificationData); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.NotificationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.RegressionMetadata) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationDataProvider creates a new instance of NotificationDataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationDataProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationDataProvider {
	mock := &NotificationDataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
