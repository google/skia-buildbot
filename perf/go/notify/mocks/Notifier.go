// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	alerts "go.skia.org/infra/perf/go/alerts"
	clustering2 "go.skia.org/infra/perf/go/clustering2"

	context "context"

	frame "go.skia.org/infra/perf/go/ui/frame"

	mock "github.com/stretchr/testify/mock"

	provider "go.skia.org/infra/perf/go/git/provider"
)

// Notifier is an autogenerated mock type for the Notifier type
type Notifier struct {
	mock.Mock
}

// ExampleSend provides a mock function with given fields: ctx, alert
func (_m *Notifier) ExampleSend(ctx context.Context, alert *alerts.Alert) error {
	ret := _m.Called(ctx, alert)

	if len(ret) == 0 {
		panic("no return value specified for ExampleSend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *alerts.Alert) error); ok {
		r0 = rf(ctx, alert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegressionFound provides a mock function with given fields: ctx, commit, previousCommit, alert, cl, _a5, regressionID
func (_m *Notifier) RegressionFound(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, _a5 *frame.FrameResponse, regressionID string) (string, error) {
	ret := _m.Called(ctx, commit, previousCommit, alert, cl, _a5, regressionID)

	if len(ret) == 0 {
		panic("no return value specified for RegressionFound")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse, string) (string, error)); ok {
		return rf(ctx, commit, previousCommit, alert, cl, _a5, regressionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse, string) string); ok {
		r0 = rf(ctx, commit, previousCommit, alert, cl, _a5, regressionID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse, string) error); ok {
		r1 = rf(ctx, commit, previousCommit, alert, cl, _a5, regressionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegressionMissing provides a mock function with given fields: ctx, commit, previousCommit, alert, cl, _a5, threadingReference
func (_m *Notifier) RegressionMissing(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, _a5 *frame.FrameResponse, threadingReference string) error {
	ret := _m.Called(ctx, commit, previousCommit, alert, cl, _a5, threadingReference)

	if len(ret) == 0 {
		panic("no return value specified for RegressionMissing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse, string) error); ok {
		r0 = rf(ctx, commit, previousCommit, alert, cl, _a5, threadingReference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNotification provides a mock function with given fields: ctx, commit, previousCommit, alert, cl, _a5, notificationId
func (_m *Notifier) UpdateNotification(ctx context.Context, commit provider.Commit, previousCommit provider.Commit, alert *alerts.Alert, cl *clustering2.ClusterSummary, _a5 *frame.FrameResponse, notificationId string) error {
	ret := _m.Called(ctx, commit, previousCommit, alert, cl, _a5, notificationId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, provider.Commit, provider.Commit, *alerts.Alert, *clustering2.ClusterSummary, *frame.FrameResponse, string) error); ok {
		r0 = rf(ctx, commit, previousCommit, alert, cl, _a5, notificationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotifier creates a new instance of Notifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Notifier {
	mock := &Notifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
