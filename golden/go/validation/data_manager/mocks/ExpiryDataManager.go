// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	data_manager "go.skia.org/infra/golden/go/validation/data_manager"

	time "time"
)

// ExpiryDataManager is an autogenerated mock type for the ExpiryDataManager type
type ExpiryDataManager struct {
	mock.Mock
}

// GetExpiringExpectations provides a mock function with given fields: ctx
func (_m *ExpiryDataManager) GetExpiringExpectations(ctx context.Context) ([]data_manager.ExpectationKey, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetExpiringExpectations")
	}

	var r0 []data_manager.ExpectationKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]data_manager.ExpectationKey, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []data_manager.ExpectationKey); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data_manager.ExpectationKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExpectationsExpiry provides a mock function with given fields: ctx, expectations, expirationTime
func (_m *ExpiryDataManager) UpdateExpectationsExpiry(ctx context.Context, expectations []data_manager.ExpectationKey, expirationTime time.Time) error {
	ret := _m.Called(ctx, expectations, expirationTime)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExpectationsExpiry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []data_manager.ExpectationKey, time.Time) error); ok {
		r0 = rf(ctx, expectations, expirationTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExpiryDataManager creates a new instance of ExpiryDataManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpiryDataManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpiryDataManager {
	mock := &ExpiryDataManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
