// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	gerrit "go.skia.org/infra/go/gerrit"

	types "go.skia.org/infra/skcq/go/types"
)

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields: ctx, ci, cleanupPatchsetID
func (_m *Verifier) Cleanup(ctx context.Context, ci *gerrit.ChangeInfo, cleanupPatchsetID int64) {
	_m.Called(ctx, ci, cleanupPatchsetID)
}

// Name provides a mock function with no fields
func (_m *Verifier) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Verify provides a mock function with given fields: ctx, ci, startTime
func (_m *Verifier) Verify(ctx context.Context, ci *gerrit.ChangeInfo, startTime int64) (types.VerifierState, string, error) {
	ret := _m.Called(ctx, ci, startTime)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 types.VerifierState
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, int64) (types.VerifierState, string, error)); ok {
		return rf(ctx, ci, startTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gerrit.ChangeInfo, int64) types.VerifierState); ok {
		r0 = rf(ctx, ci, startTime)
	} else {
		r0 = ret.Get(0).(types.VerifierState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gerrit.ChangeInfo, int64) string); ok {
		r1 = rf(ctx, ci, startTime)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *gerrit.ChangeInfo, int64) error); ok {
		r2 = rf(ctx, ci, startTime)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Verifier {
	mock := &Verifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
