// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BigQueryClient is an autogenerated mock type for the BigQueryClient type
type BigQueryClient struct {
	mock.Mock
}

// CreateTable provides a mock function with given fields: ctx, datasetID, tableName, schema
func (_m *BigQueryClient) CreateTable(ctx context.Context, datasetID string, tableName string, schema interface{}) error {
	ret := _m.Called(ctx, datasetID, tableName, schema)

	if len(ret) == 0 {
		panic("no return value specified for CreateTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, datasetID, tableName, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, datasetID, tableName, rows
func (_m *BigQueryClient) Insert(ctx context.Context, datasetID string, tableName string, rows interface{}) error {
	ret := _m.Called(ctx, datasetID, tableName, rows)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, datasetID, tableName, rows)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBigQueryClient creates a new instance of BigQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBigQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BigQueryClient {
	mock := &BigQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
