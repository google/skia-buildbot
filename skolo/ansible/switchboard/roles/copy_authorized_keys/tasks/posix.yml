# Copy the first set of keys exclusively, which will remove keys that have been removed from the local `authorized_keys`.
- name: Copy master list authorized_keys file exclusively.
  ansible.posix.authorized_key:
    user: '{{ skolo_account }}'
    state: present
    key: "{{ lookup('file', all.repo_root + '/skolo/authorized_keys') }}"
    exclusive: true

- name: set authorized_keys_filename fact.
  set_fact:
    authorized_keys_filename:
      '/tmp/copy_authorized_keys-from-jumphost-to-{{ inventory_hostname }}'

- name: Grab the 'chrome-bot' public key from the jumphost.
  # https://docs.ansible.com/ansible/latest/inventory_guide/connection_details.html#setting-a-remote-user
  # Without this, we'll ssh into the jumphost with whomever we are running
  # ansible as (e.g. root). We can't log into root@jumphost without updating
  # the authorized_keys and logging in as root is a Bad Idea (tm) anyway.
  remote_user: 'chrome-bot'
  delegate_to: '{{ copy_authorized_keys__jumphost }}'
  # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/fetch_module.html
  ansible.builtin.fetch:
    src: '~chrome-bot/.ssh/id_ed25519.pub'
    dest: '{{ authorized_keys_filename }}'
    flat: true
  when: copy_authorized_keys__jumphost != "skip"

- name: Add the jumphost public key.
  ansible.posix.authorized_key:
    user: '{{ skolo_account }}'
    state: present
    key: "{{ lookup('file', authorized_keys_filename) }}"
    exclusive: false
  when: copy_authorized_keys__jumphost != "skip"
