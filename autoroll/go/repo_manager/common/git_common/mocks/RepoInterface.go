// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RepoInterface is an autogenerated mock type for the RepoInterface type
type RepoInterface struct {
	mock.Mock
}

// IsAncestor provides a mock function with given fields: ctx, a, b
func (_m *RepoInterface) IsAncestor(ctx context.Context, a string, b string) (bool, error) {
	ret := _m.Called(ctx, a, b)

	if len(ret) == 0 {
		panic("no return value specified for IsAncestor")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, a, b)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, a, b)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, a, b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveRef provides a mock function with given fields: ctx, ref
func (_m *RepoInterface) ResolveRef(ctx context.Context, ref string) (string, error) {
	ret := _m.Called(ctx, ref)

	if len(ret) == 0 {
		panic("no return value specified for ResolveRef")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ref)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepoInterface creates a new instance of RepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoInterface {
	mock := &RepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
