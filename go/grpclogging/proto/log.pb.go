// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: log.proto

package proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Entry is a structured log message for grpc events.
// It can represent either side of an rpc: client or server.
type Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Elapsed       *durationpb.Duration   `protobuf:"bytes,2,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	StatusCode    int32                  `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage string                 `protobuf:"bytes,4,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	StatusDetails []*anypb.Any           `protobuf:"bytes,5,rep,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	Error         string                 `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// When cabe receives an incoming gRPC request, that would
	// be logged in the server_unary field. Since cabe does
	// not currently implement any streaming server calls,
	// there is no corresponding server_stream field.
	ServerUnary *ServerUnary `protobuf:"bytes,7,opt,name=server_unary,json=serverUnary,proto3" json:"server_unary,omitempty"`
	// When cabe makes an outgoing unary gRPC call to some
	// other service, that gets logged in client_unary.
	ClientUnary *ClientUnary `protobuf:"bytes,8,opt,name=client_unary,json=clientUnary,proto3" json:"client_unary,omitempty"`
	// When cabe makes an outgoing streaming gRPC call to some
	// other service, that gets logged in client_stream.
	ClientStream *ClientStream `protobuf:"bytes,9,opt,name=client_stream,json=clientStream,proto3" json:"client_stream,omitempty"`
	// These fields are processed by gcp's log to connect log lines
	// to traces and spans, if present. See:
	// https://cloud.google.com/logging/docs/structured-logging#structured_logging_special_fields
	TraceId       string `protobuf:"bytes,10,opt,name=trace_id,json=logging.googleapis.com/trace,proto3" json:"trace_id,omitempty"`
	SpanId        string `protobuf:"bytes,11,opt,name=span_id,json=logging.googleapis.com/spanId,proto3" json:"span_id,omitempty"`
	TraceSampled  bool   `protobuf:"varint,12,opt,name=trace_sampled,json=logging.googleapis.com/trace_sampled,proto3" json:"trace_sampled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entry) Reset() {
	*x = Entry{}
	mi := &file_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{0}
}

func (x *Entry) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Entry) GetElapsed() *durationpb.Duration {
	if x != nil {
		return x.Elapsed
	}
	return nil
}

func (x *Entry) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Entry) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *Entry) GetStatusDetails() []*anypb.Any {
	if x != nil {
		return x.StatusDetails
	}
	return nil
}

func (x *Entry) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Entry) GetServerUnary() *ServerUnary {
	if x != nil {
		return x.ServerUnary
	}
	return nil
}

func (x *Entry) GetClientUnary() *ClientUnary {
	if x != nil {
		return x.ClientUnary
	}
	return nil
}

func (x *Entry) GetClientStream() *ClientStream {
	if x != nil {
		return x.ClientStream
	}
	return nil
}

func (x *Entry) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Entry) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *Entry) GetTraceSampled() bool {
	if x != nil {
		return x.TraceSampled
	}
	return false
}

// ServerUnary logs the server side of a grpc unary request, as intercepted
// by https://pkg.go.dev/google.golang.org/grpc#UnaryServerInterceptor
type ServerUnary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// request is the incoming grpc request proto sent by
	// a client calling cabe.
	Request *anypb.Any `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// response is the outgoing grpc response proto returned
	// by cabe to the caller.
	Response *anypb.Any `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	// full_method is the fully qualified grpc method being
	// called, e.g. "cabe.v1.Analysis/GetAnalysis"
	FullMethod string `protobuf:"bytes,3,opt,name=full_method,json=fullMethod,proto3" json:"full_method,omitempty"`
	// user is the identity of the user making the incoming server request.
	User          string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerUnary) Reset() {
	*x = ServerUnary{}
	mi := &file_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerUnary) ProtoMessage() {}

func (x *ServerUnary) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerUnary.ProtoReflect.Descriptor instead.
func (*ServerUnary) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{1}
}

func (x *ServerUnary) GetRequest() *anypb.Any {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ServerUnary) GetResponse() *anypb.Any {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ServerUnary) GetFullMethod() string {
	if x != nil {
		return x.FullMethod
	}
	return ""
}

func (x *ServerUnary) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

// ClientUnary logs the client side of a grpc unary request, as intercepted
// by https://pkg.go.dev/google.golang.org/grpc#UnaryClientInterceptor
type ClientUnary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        string                 `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Request       *anypb.Any             `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Response      *anypb.Any             `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientUnary) Reset() {
	*x = ClientUnary{}
	mi := &file_log_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUnary) ProtoMessage() {}

func (x *ClientUnary) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUnary.ProtoReflect.Descriptor instead.
func (*ClientUnary) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{2}
}

func (x *ClientUnary) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ClientUnary) GetRequest() *anypb.Any {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ClientUnary) GetResponse() *anypb.Any {
	if x != nil {
		return x.Response
	}
	return nil
}

// ClientStream logs the client side of a grpc stream request, as intercepted
// by https://pkg.go.dev/google.golang.org/grpc#StreamClientInterceptor
type ClientStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        string                 `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	StreamName    string                 `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	ServerStreams bool                   `protobuf:"varint,3,opt,name=server_streams,json=serverStreams,proto3" json:"server_streams,omitempty"`
	ClientStreams bool                   `protobuf:"varint,4,opt,name=client_streams,json=clientStreams,proto3" json:"client_streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientStream) Reset() {
	*x = ClientStream{}
	mi := &file_log_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStream) ProtoMessage() {}

func (x *ClientStream) ProtoReflect() protoreflect.Message {
	mi := &file_log_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStream.ProtoReflect.Descriptor instead.
func (*ClientStream) Descriptor() ([]byte, []int) {
	return file_log_proto_rawDescGZIP(), []int{3}
}

func (x *ClientStream) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ClientStream) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *ClientStream) GetServerStreams() bool {
	if x != nil {
		return x.ServerStreams
	}
	return false
}

func (x *ClientStream) GetClientStreams() bool {
	if x != nil {
		return x.ClientStreams
	}
	return false
}

var File_log_proto protoreflect.FileDescriptor

const file_log_proto_rawDesc = "" +
	"\n" +
	"\tlog.proto\x12\bgrpclogs\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x19google/protobuf/any.proto\"\xd7\x04\n" +
	"\x05Entry\x120\n" +
	"\x05start\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x123\n" +
	"\aelapsed\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\aelapsed\x12\x1f\n" +
	"\vstatus_code\x18\x03 \x01(\x05R\n" +
	"statusCode\x12%\n" +
	"\x0estatus_message\x18\x04 \x01(\tR\rstatusMessage\x12;\n" +
	"\x0estatus_details\x18\x05 \x03(\v2\x14.google.protobuf.AnyR\rstatusDetails\x12\x14\n" +
	"\x05error\x18\x06 \x01(\tR\x05error\x128\n" +
	"\fserver_unary\x18\a \x01(\v2\x15.grpclogs.ServerUnaryR\vserverUnary\x128\n" +
	"\fclient_unary\x18\b \x01(\v2\x15.grpclogs.ClientUnaryR\vclientUnary\x12;\n" +
	"\rclient_stream\x18\t \x01(\v2\x16.grpclogs.ClientStreamR\fclientStream\x12.\n" +
	"\btrace_id\x18\n" +
	" \x01(\tR\x1clogging.googleapis.com/trace\x12.\n" +
	"\aspan_id\x18\v \x01(\tR\x1dlogging.googleapis.com/spanId\x12;\n" +
	"\rtrace_sampled\x18\f \x01(\bR$logging.googleapis.com/trace_sampled\"\xa4\x01\n" +
	"\vServerUnary\x12.\n" +
	"\arequest\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\arequest\x120\n" +
	"\bresponse\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\bresponse\x12\x1f\n" +
	"\vfull_method\x18\x03 \x01(\tR\n" +
	"fullMethod\x12\x12\n" +
	"\x04user\x18\x04 \x01(\tR\x04user\"\x87\x01\n" +
	"\vClientUnary\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12.\n" +
	"\arequest\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\arequest\x120\n" +
	"\bresponse\x18\x03 \x01(\v2\x14.google.protobuf.AnyR\bresponse\"\x95\x01\n" +
	"\fClientStream\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x1f\n" +
	"\vstream_name\x18\x02 \x01(\tR\n" +
	"streamName\x12%\n" +
	"\x0eserver_streams\x18\x03 \x01(\bR\rserverStreams\x12%\n" +
	"\x0eclient_streams\x18\x04 \x01(\bR\rclientStreamsB(Z&go.skia.org/infra/go/grpclogging/protob\x06proto3"

var (
	file_log_proto_rawDescOnce sync.Once
	file_log_proto_rawDescData []byte
)

func file_log_proto_rawDescGZIP() []byte {
	file_log_proto_rawDescOnce.Do(func() {
		file_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)))
	})
	return file_log_proto_rawDescData
}

var file_log_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_log_proto_goTypes = []any{
	(*Entry)(nil),                 // 0: grpclogs.Entry
	(*ServerUnary)(nil),           // 1: grpclogs.ServerUnary
	(*ClientUnary)(nil),           // 2: grpclogs.ClientUnary
	(*ClientStream)(nil),          // 3: grpclogs.ClientStream
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
	(*anypb.Any)(nil),             // 6: google.protobuf.Any
}
var file_log_proto_depIdxs = []int32{
	4,  // 0: grpclogs.Entry.start:type_name -> google.protobuf.Timestamp
	5,  // 1: grpclogs.Entry.elapsed:type_name -> google.protobuf.Duration
	6,  // 2: grpclogs.Entry.status_details:type_name -> google.protobuf.Any
	1,  // 3: grpclogs.Entry.server_unary:type_name -> grpclogs.ServerUnary
	2,  // 4: grpclogs.Entry.client_unary:type_name -> grpclogs.ClientUnary
	3,  // 5: grpclogs.Entry.client_stream:type_name -> grpclogs.ClientStream
	6,  // 6: grpclogs.ServerUnary.request:type_name -> google.protobuf.Any
	6,  // 7: grpclogs.ServerUnary.response:type_name -> google.protobuf.Any
	6,  // 8: grpclogs.ClientUnary.request:type_name -> google.protobuf.Any
	6,  // 9: grpclogs.ClientUnary.response:type_name -> google.protobuf.Any
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_log_proto_init() }
func file_log_proto_init() {
	if File_log_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_log_proto_rawDesc), len(file_log_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_log_proto_goTypes,
		DependencyIndexes: file_log_proto_depIdxs,
		MessageInfos:      file_log_proto_msgTypes,
	}.Build()
	File_log_proto = out.File
	file_log_proto_goTypes = nil
	file_log_proto_depIdxs = nil
}
