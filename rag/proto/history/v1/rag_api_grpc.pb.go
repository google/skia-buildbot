// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: rag_api.proto

// Working in progress protobuf and service definition.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HistoryRagApiService_GetBlames_FullMethodName = "/historyrag.v1.HistoryRagApiService/GetBlames"
)

// HistoryRagApiServiceClient is the client API for HistoryRagApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryRagApiServiceClient interface {
	GetBlames(ctx context.Context, in *GetBlamesRequest, opts ...grpc.CallOption) (*GetBlamesResponse, error)
}

type historyRagApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryRagApiServiceClient(cc grpc.ClientConnInterface) HistoryRagApiServiceClient {
	return &historyRagApiServiceClient{cc}
}

func (c *historyRagApiServiceClient) GetBlames(ctx context.Context, in *GetBlamesRequest, opts ...grpc.CallOption) (*GetBlamesResponse, error) {
	out := new(GetBlamesResponse)
	err := c.cc.Invoke(ctx, HistoryRagApiService_GetBlames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryRagApiServiceServer is the server API for HistoryRagApiService service.
// All implementations must embed UnimplementedHistoryRagApiServiceServer
// for forward compatibility
type HistoryRagApiServiceServer interface {
	GetBlames(context.Context, *GetBlamesRequest) (*GetBlamesResponse, error)
	mustEmbedUnimplementedHistoryRagApiServiceServer()
}

// UnimplementedHistoryRagApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryRagApiServiceServer struct {
}

func (UnimplementedHistoryRagApiServiceServer) GetBlames(context.Context, *GetBlamesRequest) (*GetBlamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlames not implemented")
}
func (UnimplementedHistoryRagApiServiceServer) mustEmbedUnimplementedHistoryRagApiServiceServer() {}

// UnsafeHistoryRagApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryRagApiServiceServer will
// result in compilation errors.
type UnsafeHistoryRagApiServiceServer interface {
	mustEmbedUnimplementedHistoryRagApiServiceServer()
}

func RegisterHistoryRagApiServiceServer(s grpc.ServiceRegistrar, srv HistoryRagApiServiceServer) {
	s.RegisterService(&HistoryRagApiService_ServiceDesc, srv)
}

func _HistoryRagApiService_GetBlames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryRagApiServiceServer).GetBlames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryRagApiService_GetBlames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryRagApiServiceServer).GetBlames(ctx, req.(*GetBlamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryRagApiService_ServiceDesc is the grpc.ServiceDesc for HistoryRagApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryRagApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "historyrag.v1.HistoryRagApiService",
	HandlerType: (*HistoryRagApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlames",
			Handler:    _HistoryRagApiService_GetBlames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rag_api.proto",
}
