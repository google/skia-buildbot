"""
Top level module of golden.build.
"""
module(
    name = "goldmine_build",
    version = "",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")
bazel_dep(name = "aspect_rules_esbuild", version = "0.22.1")
bazel_dep(name = "aspect_rules_js", version = "2.5.0")
bazel_dep(name = "aspect_rules_ts", version = "3.7.0")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "gazelle", version = "0.45.0")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_browsers", version = "0.2.0")
bazel_dep(name = "rules_cc", version = "0.2.2")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "rules_nodejs", version = "6.5.0")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "rules_pkg", version = "1.1.0")
bazel_dep(name = "rules_python", version = "1.5.4")
bazel_dep(name = "rules_shell", version = "0.6.0")
bazel_dep(name = "tar.bzl", version = "0.5.5")

# -- bazel_dep definitions -- #

####################################################################################################
# aspect_rules_ts setup
####################################################################################################

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

####################################################################################################
# rules_python setup
####################################################################################################

# We next initialize the python toolchain using the extension.
# You can set different Python versions in this block.
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.defaults(
    # Use python.defaults if you have defined multiple toolchain versions.
    python_version = "3.9",
    python_version_env = "BAZEL_PYTHON_VERSION",
)
python.toolchain(
    configure_coverage_tool = True,
    python_version = "3.9",
)

# -- use_repo_rule statements -- #

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

go_deps.from_file(go_mod = "//:go.mod")
use_repo(go_deps, "com_github_a8m_envsubst", "com_github_aclements_go_moremath", "com_github_bazelbuild_buildtools", "com_github_bazelbuild_remote_apis", "com_github_bazelbuild_remote_apis_sdks", "com_github_blakesmith_ar", "com_github_bradfitz_gomemcache", "com_github_cenkalti_backoff", "com_github_cenkalti_backoff_v4", "com_github_cockroachdb_cockroach_go_v2", "com_github_davecgh_go_spew", "com_github_dustin_go_humanize", "com_github_fiorix_go_web", "com_github_flynn_json5", "com_github_go_chi_chi_v5", "com_github_go_python_gpython", "com_github_golang_groupcache", "com_github_golang_mock", "com_github_golang_protobuf", "com_github_google_go_github_v29", "com_github_google_go_licenses", "com_github_google_uuid", "com_github_googleapis_gax_go_v2", "com_github_gorilla_securecookie", "com_github_hako_durafmt", "com_github_hashicorp_go_multierror", "com_github_hashicorp_golang_lru", "com_github_invopop_jsonschema", "com_github_jackc_pgconn", "com_github_jackc_pgtype", "com_github_jackc_pgx_v4", "com_github_jcgregorio_logger", "com_github_jeffail_gabs_v2", "com_github_kballard_go_shellquote", "com_github_kisielk_errcheck", "com_github_masterminds_semver", "com_github_masterminds_sprig", "com_github_miekg_dns", "com_github_nfnt_resize", "com_github_otiai10_copy", "com_github_patrickmn_go_cache", "com_github_pmezard_go_difflib", "com_github_prometheus_client_golang", "com_github_protocolbuffers_txtpbfmt", "com_github_r3labs_sse_v2", "com_github_rs_cors", "com_github_sendgrid_sendgrid_go", "com_github_shirou_gopsutil", "com_github_skia_dev_google_api_go_client", "com_github_skia_dev_protoc_gen_twirp_typescript", "com_github_spf13_cobra", "com_github_stretchr_testify", "com_github_syndtr_goleveldb", "com_github_tarm_serial", "com_github_texttheater_golang_levenshtein", "com_github_twitchtv_twirp", "com_github_unrolled_secure", "com_github_urfave_cli_v2", "com_github_vektra_mockery_v2", "com_github_willf_bitset", "com_github_xeipuuv_gojsonschema", "com_github_yannh_kubeconform", "com_github_yusufpapurcu_wmi", "com_github_zeebo_bencode", "com_google_cloud_go_bigtable", "com_google_cloud_go_compute_metadata", "com_google_cloud_go_datastore", "com_google_cloud_go_firestore", "com_google_cloud_go_iam", "com_google_cloud_go_logging", "com_google_cloud_go_monitoring", "com_google_cloud_go_pubsub", "com_google_cloud_go_secretmanager", "com_google_cloud_go_storage", "in_gopkg_fsnotify_v1", "in_gopkg_olivere_elastic_v5", "in_gopkg_yaml_v2", "io_k8s_api", "io_k8s_apimachinery", "io_k8s_client_go", "io_k8s_kubectl", "io_k8s_sigs_yaml", "io_opencensus_go", "io_opencensus_go_contrib_exporter_stackdriver", "net_howett_plist", "org_chromium_go_luci", "org_golang_google_api", "org_golang_google_genproto", "org_golang_google_genproto_googleapis_api", "org_golang_google_genproto_googleapis_rpc", "org_golang_google_grpc", "org_golang_google_protobuf", "org_golang_x_exp", "org_golang_x_net", "org_golang_x_oauth2", "org_golang_x_sync", "org_golang_x_sys", "org_golang_x_term", "org_golang_x_time", "org_golang_x_tools")

go_sdk.from_file(
    name = "go_sdk",
    go_mod = "//:go.mod",
)
use_repo(go_sdk, "go_sdk")

# -- End of go extension -- #

#############################
# OCI Images
#############################

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Declare external images you need to pull, for example:
oci.pull(
    name = "distroless_base",
    digest = "sha256:ccaef5ee2f1850270d453fdf700a5392534f8d1a8ca2acda391fbb6a06b81c86",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
    ],
)

oci.pull(
    name = "ubuntu",
    digest = "sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab",
    image = "ubuntu",
    platforms = [
        "linux/amd64",
    ],
    tag = "latest",
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "ubuntu", "ubuntu_linux_amd64")

# -- repo definitions -- #

# See https://github.com/aspect-build/rules_js/blob/main/docs/pnpm.md

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "16.14.0")
use_repo(node, "nodejs_toolchains")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    additional_file_contents = {},
    bins = {},
    custom_postinstalls = {},
    data = [
        "//:package.json",
    ],
    dev = False,
    external_repository_action_cache = ".aspect/rules/external_repository_action_cache",
    lifecycle_hooks = {
        "*": [
            "preinstall",
            "install",
            "postinstall",
        ],
    },
    lifecycle_hooks_envs = {},
    lifecycle_hooks_execution_requirements = {
        "*": [
            "no-sandbox",
        ],
    },
    no_optional = False,
    npm_package_lock = "//:package-lock.json",
    npm_package_target_name = "{dirname}",
    npmrc = "//:.npmrc",
    package_visibility = {},
    patch_args = {
        "*": [
            "-p0",
        ],
    },
    patches = {},
    pnpm_lock = "//:pnpm-lock.yaml",
    preupdate = [],
    prod = False,
    public_hoist_packages = {
        #"supports-color@8.1.1": [""],
    },
    quiet = True,
    update_pnpm_lock = True,
    verify_node_modules_ignored = "//:.bazelignore",
)

use_repo(
    npm,
    "npm",
)

# Load local extensions.
google_cloud_sdk_ext = use_extension("//bazel/external:google_cloud_sdk.bzl", "google_cloud_sdk_ext")
use_repo(google_cloud_sdk_ext, "google_cloud_sdk_ext")

cockroachdb_cli_ext = use_extension("//bazel/external:cockroachdb.bzl", "cockroachdb_cli_ext")
use_repo(cockroachdb_cli_ext, "cockroachdb_cli_ext")
