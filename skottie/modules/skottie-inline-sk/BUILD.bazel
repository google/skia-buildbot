load("//infra-sk:index.bzl", "sk_demo_page_server", "sk_element", "sk_page")
load("//infra-sk/esbuild:esbuild.bzl", "esbuild_prod_bundle")

sk_demo_page_server(
    name = "demo_page_server",
    sk_page = ":skottie-inline-sk-demo",
)

sk_element(
    name = "skottie-inline-sk",
    sass_srcs = ["skottie-inline-sk.scss"],
    sk_element_deps = ["//skottie/modules/skottie-player-sk"],
    ts_deps = [
        "//infra-sk/modules/ElementSk:index_ts_lib",
        "//elements-sk/modules:define_ts_lib",
        "//infra-sk/modules:jsonorthrow_ts_lib",
        "//:node_modules/lit",
    ],
    ts_srcs = [
        "index.ts",
        "skottie-inline-sk.ts",
    ],
    visibility = ["//visibility:public"],
)

sk_page(
    name = "skottie-inline-sk-demo",
    html_file = "skottie-inline-sk-demo.html",
    sk_element_deps = [":skottie-inline-sk"],
    ts_entry_point = "skottie-inline-sk-demo.ts",
)

filegroup(
    name = "index_ts",
    srcs = ["index.ts"],
    visibility = ["//skottie:__subpackages__"],
)

# We want to make skottie-inline-sk available for the documentation on skia.org
# (e.g. https://skia.org/docs/user/modules/skottie/). In order to do this, we make an
# inline-bundle.js file with that element's code and make it available in the output directory.
#
# This rule lives here, rather than on //skottie/pages/BUILD.bazel, because esbuild_prod_bundle
# complains if the entry-point file is not in the same Bazel package as the rule.
esbuild_prod_bundle(
    name = "bundle",
    entry_point = "//skottie/modules/skottie-inline-sk:index_ts",
    output = "inline-bundle.js",
    visibility = ["//skottie:__subpackages__"],
    deps = ["//skottie/modules/skottie-inline-sk"],
)
